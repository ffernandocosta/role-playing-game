import characterData from "./data.js"
import Character from "./Character.js"

let monstersArray = ["orc", "demon", "goblin"];
// Declaring an array of monster names

let isWaiting = false;
// Declaring a variable to track if the game is waiting, it'll be used to prevent further attacks and bugs

function getNewMonster() {
    const nextMonsterData = characterData[monstersArray.shift()]
    // Getting the data of the next monster by accessing the characterData object using the first element of the monstersArray as the key
    
    return nextMonsterData ? new Character(nextMonsterData) : {}
    // Creating a new instance of the Character class with the nextMonsterData if it exists, otherwise returning an empty object
}

function attack() {
    if(!isWaiting){
        wizard.setDiceHtml();
        monster.setDiceHtml();
        // Calling the setDiceHtml() method for the wizard and monster instances to update their diceHtml properties
        
        wizard.takeDamage(monster.currentDiceScore);
        monster.takeDamage(wizard.currentDiceScore);
        // Calling the takeDamage() methods for the wizard and monster instances to update their health based on the opponent's currentDiceScore
        
        render();
        // Calling the render() function to update the UI with the latest character information
        
        if(wizard.dead) {
            endGame();
        }
        else if(monster.dead) {
            isWaiting = true;
            // Setting isWaiting to true to prevent further attacks while waiting
            
            if(monstersArray.length > 0) {
                setTimeout(() => {
                    monster = getNewMonster();
                    // Setting the monster to a new monster instance
                    
                    render();
                    // Updating the UI with the new monster instance
                    
                    isWaiting = false;
                    // Setting isWaiting to false to allow further attacks
                }, 1500)
                // Waiting for 1.5 seconds before getting the new monster and updating the UI
            }
            else {
                endGame();
            }
        }
    }
}

function endGame() {
    isWaiting = true;
    // Setting isWaiting to true to prevent further attacks
    
    const endMessage = wizard.health === 0 && monster.health === 0 ?
        "No victors - all creatures are dead" :
        wizard.health > 0 ? "The Wizard Wins" :
        "The monster is Victorious"
    // Determining the end message based on the health of the wizard and monster
    
    const endEmoji = wizard.health > 0 ? "🔮" : "☠️"
    // Setting the end emoji based on the health of the wizard
    
    setTimeout(()=>{
        document.body.innerHTML = `
            <div class="end-game">
                <h2>Game Over</h2> 
                <h3>${endMessage}</h3>
                <p class="end-emoji">${endEmoji}</p>
            </div>
            `
    }, 1500)
    // Waiting for 1.5 seconds before updating the HTML of the body to display the end game message and emoji
}

function render() {
    document.getElementById('hero').innerHTML = wizard.getCharacterHtml();
    document.getElementById('monster').innerHTML = monster.getCharacterHtml();

    const healthDamageTakenEl = document.querySelectorAll('.health-damage-taken')

    healthDamageTakenEl.forEach((div) => {
        setTimeout(() => {
            div.style.display = 'none';
        }, 1000);
    })

    // Updating the HTML content of the 'hero' and 'monster' elements with the character HTML generated by the getCharacterHtml() method of the wizard and monster instances
}

document.getElementById('attack-button').addEventListener('click', attack);
// Adding an event listener to the 'attack-button' element to trigger the attack function when clicked

const wizard = new Character(characterData.hero);
// Creating a new instance of the Character class using the hero data from the characterData object

let monster = getNewMonster();
// Creating a new monster instance by calling the getNewMonster() function

render();
// Calling the render() function to initialize the UI with the initial character information